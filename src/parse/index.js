/* Jison generated parser */
var velocity = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"root":3,"program":4,"EOF":5,"statements":6,"statement":7,"references":8,"directives":9,"content":10,"COMMENT":11,"set":12,"if":13,"elseif":14,"else":15,"end":16,"foreach":17,"break":18,"include":19,"parse":20,"evaluate":21,"define":22,"HASH":23,"NOESCAPE":24,"PARENTHESIS":25,"CLOSE_PARENTHESIS":26,"macro":27,"macro_call":28,"SET":29,"equal":30,"IF":31,"expression":32,"ELSEIF":33,"ELSE":34,"END":35,"FOREACH":36,"DOLLAR":37,"ID":38,"IN":39,"array":40,"BREAK":41,"INCLUDE":42,"params":43,"PARSE":44,"string":45,"EAVL":46,"DEFINE":47,"MACRO":48,"macro_args":49,"macro_call_args_all":50,"macro_call_args":51,"literals":52,"SPACE":53,"COMMA":54,"EQUAL":55,"map":56,"math":57,"||":58,"&&":59,"+":60,"-":61,"*":62,"/":63,"%":64,">":65,"<":66,"==":67,">=":68,"<=":69,"!=":70,"parenthesis":71,"!":72,"literal":73,"brace_begin":74,"attributes":75,"brace_end":76,"methodbd":77,"VAR_BEGIN":78,"MAP_BEGIN":79,"VAR_END":80,"MAP_END":81,"attribute":82,"method":83,"index":84,"property":85,"DOT":86,"CONTENT":87,"BRACKET":88,"CLOSE_BRACKET":89,"integer":90,"BOOL":91,"INTEGER":92,"STRING":93,"EVAL_STRING":94,"range":95,"RANGE":96,"map_item":97,"MAP_SPLIT":98,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"COMMENT",23:"HASH",24:"NOESCAPE",25:"PARENTHESIS",26:"CLOSE_PARENTHESIS",29:"SET",31:"IF",33:"ELSEIF",34:"ELSE",35:"END",36:"FOREACH",37:"DOLLAR",38:"ID",39:"IN",41:"BREAK",42:"INCLUDE",44:"PARSE",46:"EAVL",47:"DEFINE",48:"MACRO",53:"SPACE",54:"COMMA",55:"EQUAL",58:"||",59:"&&",60:"+",61:"-",62:"*",63:"/",64:"%",65:">",66:"<",67:"==",68:">=",69:"<=",70:"!=",72:"!",78:"VAR_BEGIN",79:"MAP_BEGIN",80:"VAR_END",81:"MAP_END",86:"DOT",87:"CONTENT",88:"BRACKET",89:"CLOSE_BRACKET",91:"BOOL",92:"INTEGER",93:"STRING",94:"EVAL_STRING",96:"RANGE",98:"MAP_SPLIT"},
productions_: [0,[3,2],[4,1],[6,1],[6,2],[7,1],[7,1],[7,1],[7,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,4],[9,1],[9,1],[12,5],[13,5],[14,5],[15,2],[16,2],[17,8],[17,8],[18,2],[19,5],[20,5],[20,5],[21,6],[22,6],[27,6],[27,5],[49,1],[49,2],[28,5],[28,4],[51,1],[51,1],[51,3],[51,3],[51,3],[51,3],[50,1],[50,2],[50,3],[50,2],[30,3],[32,1],[32,1],[32,1],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,1],[57,2],[57,2],[57,1],[57,1],[71,3],[8,5],[8,3],[8,5],[8,3],[8,2],[8,4],[8,2],[8,4],[74,1],[74,1],[76,1],[76,1],[75,1],[75,2],[82,1],[82,1],[82,1],[83,2],[77,4],[77,3],[43,1],[43,1],[43,3],[43,3],[85,2],[85,2],[84,3],[84,3],[84,3],[84,2],[84,2],[73,1],[73,1],[73,1],[90,1],[90,2],[45,1],[45,1],[52,1],[52,1],[52,1],[40,3],[40,1],[40,2],[95,5],[95,5],[95,5],[95,5],[56,3],[97,3],[97,3],[97,5],[97,5],[10,1],[10,1],[10,2],[10,3],[10,3],[10,2]],
performAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$) {

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1]; 
break;
case 2: this.$ = $$[$0]; 
break;
case 3: this.$ = [$$[$0]]; 
break;
case 4: this.$ = [].concat($$[$0-1], $$[$0]); 
break;
case 5: this.$ = $$[$0]; 
break;
case 6: this.$ = $$[$0]; 
break;
case 7: this.$ = $$[$0]; 
break;
case 8: this.$ = {type: 'comment', value: $$[$0] }; 
break;
case 9: this.$ = $$[$0]; 
break;
case 10: this.$ = $$[$0]; 
break;
case 11: this.$ = $$[$0]; 
break;
case 12: this.$ = $$[$0]; 
break;
case 13: this.$ = $$[$0]; 
break;
case 14: this.$ = $$[$0]; 
break;
case 15: this.$ = $$[$0]; 
break;
case 16: this.$ = $$[$0]; 
break;
case 17: this.$ = $$[$0]; 
break;
case 18: this.$ = $$[$0]; 
break;
case 19: this.$ = $$[$0]; 
break;
case 20: this.$ = { type: 'noescape' }; 
break;
case 21: this.$ = $$[$0]; 
break;
case 22: this.$ = $$[$0]; 
break;
case 23: this.$ = {type: 'set', equal: $$[$0-1] }; 
break;
case 24: this.$ = {type: 'if', condition: $$[$0-1] }; 
break;
case 25: this.$ = {type: 'elseif', condition: $$[$0-1] }; 
break;
case 26: this.$ = {type: 'else' }; 
break;
case 27: this.$ = {type: 'end' }; 
break;
case 28: this.$ = {type: 'foreach', to: $$[$0-3], from: $$[$0-1] }; 
break;
case 29: this.$ = {type: 'foreach', to: $$[$0-3], from: $$[$0-1] }; 
break;
case 30: this.$ = {type: $$[$0] }; 
break;
case 31: this.$ = {type: 'include', args: $$[$0-1] }; 
break;
case 32: this.$ = {type: 'parse', id: $$[$0-1] }; 
break;
case 33: this.$ = {type: 'parse', id: $$[$0-1] }; 
break;
case 34: this.$ = {type: 'evaluate', id: $$[$0-1] }; 
break;
case 35: this.$ = {type: 'define', id: $$[$0-1] }; 
break;
case 36: this.$ = {type: 'macro', id: $$[$0-2], args: $$[$0-1] }; 
break;
case 37: this.$ = {type: 'macro', id: $$[$0-1] }; 
break;
case 38: this.$ = [$$[$0]]; 
break;
case 39: this.$ = [].concat($$[$0-1], $$[$0]); 
break;
case 40: this.$ = { type:"macro_call", id: $$[$0-3].replace(/^\s+|\s+$/g, ''), args: $$[$0-1] }; 
break;
case 41: this.$ = { type:"macro_call", id: $$[$0-2].replace(/^\s+|\s+$/g, '') }; 
break;
case 42: this.$ = [$$[$0]]; 
break;
case 43: this.$ = [$$[$0]]; 
break;
case 44: this.$ = [].concat($$[$0-2], $$[$0]); 
break;
case 45: this.$ = [].concat($$[$0-2], $$[$0]); 
break;
case 46: this.$ = [].concat($$[$0-2], $$[$0]); 
break;
case 47: this.$ = [].concat($$[$0-2], $$[$0]); 
break;
case 48: this.$ = $$[$0]; 
break;
case 49: this.$ = $$[$0]; 
break;
case 50: this.$ = $$[$0-1]; 
break;
case 51: this.$ = $$[$0-1]; 
break;
case 52: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 53: this.$ = $$[$0]; 
break;
case 54: this.$ = $$[$0]; 
break;
case 55: this.$ = $$[$0]; 
break;
case 56: this.$ = {type: 'math', expression: [$$[$0-2], $$[$0]], operator: $$[$0-1] }; 
break;
case 57: this.$ = {type: 'math', expression: [$$[$0-2], $$[$0]], operator: $$[$0-1] }; 
break;
case 58: this.$ = {type: 'math', expression: [$$[$0-2], $$[$0]], operator: $$[$0-1] }; 
break;
case 59: this.$ = {type: 'math', expression: [$$[$0-2], $$[$0]], operator: $$[$0-1] }; 
break;
case 60: this.$ = {type: 'math', expression: [$$[$0-2], $$[$0]], operator: $$[$0-1] }; 
break;
case 61: this.$ = {type: 'math', expression: [$$[$0-2], $$[$0]], operator: $$[$0-1] }; 
break;
case 62: this.$ = {type: 'math', expression: [$$[$0-2], $$[$0]], operator: $$[$0-1] }; 
break;
case 63: this.$ = {type: 'math', expression: [$$[$0-2], $$[$0]], operator: $$[$0-1] }; 
break;
case 64: this.$ = {type: 'math', expression: [$$[$0-2], $$[$0]], operator: $$[$0-1] }; 
break;
case 65: this.$ = {type: 'math', expression: [$$[$0-2], $$[$0]], operator: $$[$0-1] }; 
break;
case 66: this.$ = {type: 'math', expression: [$$[$0-2], $$[$0]], operator: $$[$0-1] }; 
break;
case 67: this.$ = {type: 'math', expression: [$$[$0-2], $$[$0]], operator: $$[$0-1] }; 
break;
case 68: this.$ = {type: 'math', expression: [$$[$0-2], $$[$0]], operator: $$[$0-1] }; 
break;
case 69: this.$ = $$[$0]; 
break;
case 70: this.$ = {type: 'math', expression: [$$[$0]], operator: 'minus' }; 
break;
case 71: this.$ = {type: 'math', expression: [$$[$0]], operator: 'not' }; 
break;
case 72: this.$ = $$[$0]; 
break;
case 73: this.$ = $$[$0]; 
break;
case 74: this.$ = {type: 'math', expression: [$$[$0-1]], operator: 'parenthesis' }; 
break;
case 75: this.$ = {type: "references", id: $$[$0-2], path: $$[$0-1], isWraped: true, leader: $$[$0-4] }; 
break;
case 76: this.$ = {type: "references", id: $$[$0-1], path: $$[$0], leader: $$[$0-2] }; 
break;
case 77: this.$ = {type: "references", id: $$[$0-2].id, path: $$[$0-1], isWraped: true, leader: $$[$0-4], args: $$[$0-2].args }; 
break;
case 78: this.$ = {type: "references", id: $$[$0-1].id, path: $$[$0], leader: $$[$0-2], args: $$[$0].args }; 
break;
case 79: this.$ = {type: "references", id: $$[$0], leader: $$[$0-1] }; 
break;
case 80: this.$ = {type: "references", id: $$[$0-1], isWraped: true, leader: $$[$0-3] }; 
break;
case 81: this.$ = {type: "references", id: $$[$0].id, leader: $$[$0-1], args: $$[$0].args }; 
break;
case 82: this.$ = {type: "references", id: $$[$0-1].id, isWraped: true, args: $$[$0-1].args, leader: $$[$0-3] }; 
break;
case 83: this.$ = $$[$0]; 
break;
case 84: this.$ = $$[$0]; 
break;
case 85: this.$ = $$[$0]; 
break;
case 86: this.$ = $$[$0]; 
break;
case 87: this.$ = [$$[$0]]; 
break;
case 88: this.$ = [].concat($$[$0-1], $$[$0]); 
break;
case 89: this.$ = {type:"method", id: $$[$0].id, args: $$[$0].args }; 
break;
case 90: this.$ = {type: "index", id: $$[$0] }; 
break;
case 91: this.$ = {type: "property", id: $$[$0] }; if ($$[$0].type === 'content') this.$ = $$[$0]; 
break;
case 92: this.$ = $$[$0]; 
break;
case 93: this.$ = {id: $$[$0-3], args: $$[$0-1] }; 
break;
case 94: this.$ = {id: $$[$0-2], args: false }; 
break;
case 95: this.$ = [$$[$0]]; 
break;
case 96: this.$ = [$$[$0]]; 
break;
case 97: this.$ = [].concat($$[$0-2], $$[$0]); 
break;
case 98: this.$ = [].concat($$[$0-2], $$[$0]); 
break;
case 99: this.$ = $$[$0]; 
break;
case 100: this.$ = {type: 'content', value: $$[$0-1] + $$[$0] }; 
break;
case 101: this.$ = $$[$0-1]; 
break;
case 102: this.$ = $$[$0-1]; 
break;
case 103: this.$ = {type: "content", value: $$[$0-2] + $$[$0-1].value + $$[$0] }; 
break;
case 104: this.$ = {type: "content", value: $$[$0-1] + $$[$0] }; 
break;
case 105: this.$ = {type: "content", value: $$[$0-1] + $$[$0] }; 
break;
case 106: this.$ = $$[$0]; 
break;
case 107: this.$ = {type: 'integer', value: $$[$0] }; 
break;
case 108: this.$ = {type: 'bool', value: $$[$0] }; 
break;
case 109: this.$ = $$[$0]; 
break;
case 110: this.$ = - parseInt($$[$0], 10); 
break;
case 111: this.$ = {type: 'string', value: $$[$0] }; 
break;
case 112: this.$ = {type: 'string', value: $$[$0], isEval: true }; 
break;
case 113: this.$ = $$[$0];
break;
case 114: this.$ = $$[$0];
break;
case 115: this.$ = $$[$0]; 
break;
case 116: this.$ = {type: 'array', value: $$[$0-1] }; 
break;
case 117: this.$ = $$[$0]; 
break;
case 118: this.$ = {type: 'array', value: [] }; 
break;
case 119: this.$ = {type: 'array', isRange: true, value: [$$[$0-3], $$[$0-1]]}; 
break;
case 120: this.$ = {type: 'array', isRange: true, value: [$$[$0-3], $$[$0-1]]}; 
break;
case 121: this.$ = {type: 'array', isRange: true, value: [$$[$0-3], $$[$0-1]]}; 
break;
case 122: this.$ = {type: 'array', isRange: true, value: [$$[$0-3], $$[$0-1]]}; 
break;
case 123: this.$ = {type: 'map', value: $$[$0-1] }; 
break;
case 124: this.$ = {}; this.$[$$[$0-2].value] = $$[$0]; 
break;
case 125: this.$ = {}; this.$[$$[$0-2].value] = $$[$0]; 
break;
case 126: this.$ = $$[$0-4]; this.$[$$[$0-2].value] = $$[$0]; 
break;
case 127: this.$ = $$[$0-4]; this.$[$$[$0-2].value] = $$[$0]; 
break;
case 128: this.$ = $$[$0]; 
break;
case 129: this.$ = $$[$0]; 
break;
case 130: this.$ = $$[$0-1] + $$[$0]; 
break;
case 131: this.$ = $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 132: this.$ = $$[$0-2] + $$[$0-1]; 
break;
case 133: this.$ = $$[$0-1] + $$[$0]; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:[1,8],12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:[1,21],27:22,28:23,37:[1,9],38:[1,25],87:[1,24]},{1:[3]},{5:[1,26]},{5:[2,2],7:27,8:5,9:6,10:7,11:[1,8],12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:[1,21],27:22,28:23,37:[1,9],38:[1,25],87:[1,24]},{5:[2,3],11:[2,3],23:[2,3],37:[2,3],38:[2,3],87:[2,3]},{5:[2,5],11:[2,5],23:[2,5],37:[2,5],38:[2,5],87:[2,5]},{5:[2,6],11:[2,6],23:[2,6],37:[2,6],38:[2,6],87:[2,6]},{5:[2,7],11:[2,7],23:[2,7],37:[2,7],38:[2,7],87:[2,7]},{5:[2,8],11:[2,8],23:[2,8],37:[2,8],38:[2,8],87:[2,8]},{38:[1,29],74:28,76:31,77:30,78:[1,33],79:[1,34],80:[1,35],81:[1,36],87:[1,32]},{5:[2,9],11:[2,9],23:[2,9],37:[2,9],38:[2,9],87:[2,9]},{5:[2,10],11:[2,10],23:[2,10],37:[2,10],38:[2,10],87:[2,10]},{5:[2,11],11:[2,11],23:[2,11],37:[2,11],38:[2,11],87:[2,11]},{5:[2,12],11:[2,12],23:[2,12],37:[2,12],38:[2,12],87:[2,12]},{5:[2,13],11:[2,13],23:[2,13],37:[2,13],38:[2,13],87:[2,13]},{5:[2,14],11:[2,14],23:[2,14],37:[2,14],38:[2,14],87:[2,14]},{5:[2,15],11:[2,15],23:[2,15],37:[2,15],38:[2,15],87:[2,15]},{5:[2,16],11:[2,16],23:[2,16],37:[2,16],38:[2,16],87:[2,16]},{5:[2,17],11:[2,17],23:[2,17],37:[2,17],38:[2,17],87:[2,17]},{5:[2,18],11:[2,18],23:[2,18],37:[2,18],38:[2,18],87:[2,18]},{5:[2,19],11:[2,19],23:[2,19],37:[2,19],38:[2,19],87:[2,19]},{24:[1,37],29:[1,40],31:[1,41],33:[1,42],34:[1,43],35:[1,44],36:[1,45],38:[1,39],41:[1,46],42:[1,47],44:[1,48],46:[1,49],47:[1,50],48:[1,51],87:[1,38]},{5:[2,21],11:[2,21],23:[2,21],37:[2,21],38:[2,21],87:[2,21]},{5:[2,22],11:[2,22],23:[2,22],37:[2,22],38:[2,22],87:[2,22]},{5:[2,128],11:[2,128],23:[2,128],37:[2,128],38:[2,128],87:[2,128]},{5:[2,129],11:[2,129],23:[2,129],37:[2,129],38:[2,129],87:[2,129]},{1:[2,1]},{5:[2,4],11:[2,4],23:[2,4],37:[2,4],38:[2,4],87:[2,4]},{38:[1,52],77:53},{5:[2,79],11:[2,79],23:[2,79],25:[1,55],26:[2,79],37:[2,79],38:[2,79],53:[2,79],54:[2,79],55:[2,79],58:[2,79],59:[2,79],60:[2,79],61:[2,79],62:[2,79],63:[2,79],64:[2,79],65:[2,79],66:[2,79],67:[2,79],68:[2,79],69:[2,79],70:[2,79],75:54,81:[2,79],82:56,83:57,84:58,85:59,86:[1,60],87:[2,79],88:[1,61],89:[2,79],96:[2,79]},{5:[2,81],11:[2,81],23:[2,81],26:[2,81],37:[2,81],38:[2,81],53:[2,81],54:[2,81],55:[2,81],58:[2,81],59:[2,81],60:[2,81],61:[2,81],62:[2,81],63:[2,81],64:[2,81],65:[2,81],66:[2,81],67:[2,81],68:[2,81],69:[2,81],70:[2,81],75:62,81:[2,81],82:56,83:57,84:58,85:59,86:[1,60],87:[2,81],88:[1,61],89:[2,81],96:[2,81]},{38:[1,64],77:63},{5:[2,133],11:[2,133],23:[2,133],37:[2,133],38:[2,133],87:[2,133]},{38:[2,83]},{38:[2,84]},{5:[2,85],11:[2,85],23:[2,85],26:[2,85],37:[2,85],38:[2,85],53:[2,85],54:[2,85],55:[2,85],58:[2,85],59:[2,85],60:[2,85],61:[2,85],62:[2,85],63:[2,85],64:[2,85],65:[2,85],66:[2,85],67:[2,85],68:[2,85],69:[2,85],70:[2,85],81:[2,85],87:[2,85],89:[2,85],96:[2,85]},{5:[2,86],11:[2,86],23:[2,86],26:[2,86],37:[2,86],38:[2,86],53:[2,86],54:[2,86],55:[2,86],58:[2,86],59:[2,86],60:[2,86],61:[2,86],62:[2,86],63:[2,86],64:[2,86],65:[2,86],66:[2,86],67:[2,86],68:[2,86],69:[2,86],70:[2,86],81:[2,86],87:[2,86],89:[2,86],96:[2,86]},{25:[1,65]},{5:[2,130],11:[2,130],23:[2,130],37:[2,130],38:[2,130],87:[2,130]},{5:[1,67],25:[1,68],87:[1,66]},{25:[1,69]},{25:[1,70]},{25:[1,71]},{5:[2,26],11:[2,26],23:[2,26],37:[2,26],38:[2,26],87:[2,26]},{5:[2,27],11:[2,27],23:[2,27],37:[2,27],38:[2,27],87:[2,27]},{25:[1,72]},{5:[2,30],11:[2,30],23:[2,30],37:[2,30],38:[2,30],87:[2,30]},{25:[1,73]},{25:[1,74]},{25:[1,75]},{25:[1,76]},{25:[1,77]},{25:[1,55],75:78,76:79,80:[1,35],81:[1,36],82:56,83:57,84:58,85:59,86:[1,60],88:[1,61]},{75:80,82:56,83:57,84:58,85:59,86:[1,60],88:[1,61]},{5:[2,76],11:[2,76],23:[2,76],26:[2,76],37:[2,76],38:[2,76],53:[2,76],54:[2,76],55:[2,76],58:[2,76],59:[2,76],60:[2,76],61:[2,76],62:[2,76],63:[2,76],64:[2,76],65:[2,76],66:[2,76],67:[2,76],68:[2,76],69:[2,76],70:[2,76],81:[2,76],82:81,83:57,84:58,85:59,86:[1,60],87:[2,76],88:[1,61],89:[2,76],96:[2,76]},{8:85,26:[1,83],37:[1,89],40:86,43:82,45:93,52:84,56:87,61:[1,99],73:88,79:[1,92],88:[1,90],90:94,91:[1,95],92:[1,98],93:[1,96],94:[1,97],95:91},{5:[2,87],11:[2,87],23:[2,87],26:[2,87],37:[2,87],38:[2,87],53:[2,87],54:[2,87],55:[2,87],58:[2,87],59:[2,87],60:[2,87],61:[2,87],62:[2,87],63:[2,87],64:[2,87],65:[2,87],66:[2,87],67:[2,87],68:[2,87],69:[2,87],70:[2,87],80:[2,87],81:[2,87],86:[2,87],87:[2,87],88:[2,87],89:[2,87],96:[2,87]},{5:[2,89],11:[2,89],23:[2,89],26:[2,89],37:[2,89],38:[2,89],53:[2,89],54:[2,89],55:[2,89],58:[2,89],59:[2,89],60:[2,89],61:[2,89],62:[2,89],63:[2,89],64:[2,89],65:[2,89],66:[2,89],67:[2,89],68:[2,89],69:[2,89],70:[2,89],80:[2,89],81:[2,89],86:[2,89],87:[2,89],88:[2,89],89:[2,89],96:[2,89]},{5:[2,90],11:[2,90],23:[2,90],26:[2,90],37:[2,90],38:[2,90],53:[2,90],54:[2,90],55:[2,90],58:[2,90],59:[2,90],60:[2,90],61:[2,90],62:[2,90],63:[2,90],64:[2,90],65:[2,90],66:[2,90],67:[2,90],68:[2,90],69:[2,90],70:[2,90],80:[2,90],81:[2,90],86:[2,90],87:[2,90],88:[2,90],89:[2,90],96:[2,90]},{5:[2,91],11:[2,91],23:[2,91],26:[2,91],37:[2,91],38:[2,91],53:[2,91],54:[2,91],55:[2,91],58:[2,91],59:[2,91],60:[2,91],61:[2,91],62:[2,91],63:[2,91],64:[2,91],65:[2,91],66:[2,91],67:[2,91],68:[2,91],69:[2,91],70:[2,91],80:[2,91],81:[2,91],86:[2,91],87:[2,91],88:[2,91],89:[2,91],96:[2,91]},{38:[1,101],77:100,87:[1,102]},{8:104,37:[1,89],45:93,61:[1,99],73:103,87:[1,105],89:[1,106],90:94,91:[1,95],92:[1,98],93:[1,96],94:[1,97]},{5:[2,78],11:[2,78],23:[2,78],26:[2,78],37:[2,78],38:[2,78],53:[2,78],54:[2,78],55:[2,78],58:[2,78],59:[2,78],60:[2,78],61:[2,78],62:[2,78],63:[2,78],64:[2,78],65:[2,78],66:[2,78],67:[2,78],68:[2,78],69:[2,78],70:[2,78],81:[2,78],82:81,83:57,84:58,85:59,86:[1,60],87:[2,78],88:[1,61],89:[2,78],96:[2,78]},{76:107,80:[1,35],81:[1,36]},{25:[1,55]},{26:[1,108]},{5:[2,131],11:[2,131],23:[2,131],37:[2,131],38:[2,131],87:[2,131]},{5:[2,132],11:[2,132],23:[2,132],37:[2,132],38:[2,132],87:[2,132]},{8:114,26:[1,110],37:[1,89],40:86,45:93,50:109,51:111,52:113,53:[1,112],56:87,61:[1,99],73:88,79:[1,92],88:[1,90],90:94,91:[1,95],92:[1,98],93:[1,96],94:[1,97],95:91},{8:116,30:115,37:[1,89]},{8:124,25:[1,126],32:117,37:[1,89],40:118,45:93,56:119,57:120,61:[1,122],71:121,72:[1,123],73:125,79:[1,92],88:[1,90],90:94,91:[1,95],92:[1,98],93:[1,96],94:[1,97],95:91},{8:124,25:[1,126],32:127,37:[1,89],40:118,45:93,56:119,57:120,61:[1,122],71:121,72:[1,123],73:125,79:[1,92],88:[1,90],90:94,91:[1,95],92:[1,98],93:[1,96],94:[1,97],95:91},{37:[1,128]},{8:85,37:[1,89],40:86,43:129,45:93,52:84,56:87,61:[1,99],73:88,79:[1,92],88:[1,90],90:94,91:[1,95],92:[1,98],93:[1,96],94:[1,97],95:91},{8:131,37:[1,89],45:130,93:[1,96],94:[1,97]},{37:[1,132]},{37:[1,133]},{38:[1,134]},{76:135,80:[1,35],81:[1,36],82:81,83:57,84:58,85:59,86:[1,60],88:[1,61]},{5:[2,80],11:[2,80],23:[2,80],26:[2,80],37:[2,80],38:[2,80],53:[2,80],54:[2,80],55:[2,80],58:[2,80],59:[2,80],60:[2,80],61:[2,80],62:[2,80],63:[2,80],64:[2,80],65:[2,80],66:[2,80],67:[2,80],68:[2,80],69:[2,80],70:[2,80],81:[2,80],87:[2,80],89:[2,80],96:[2,80]},{76:136,80:[1,35],81:[1,36],82:81,83:57,84:58,85:59,86:[1,60],88:[1,61]},{5:[2,88],11:[2,88],23:[2,88],26:[2,88],37:[2,88],38:[2,88],53:[2,88],54:[2,88],55:[2,88],58:[2,88],59:[2,88],60:[2,88],61:[2,88],62:[2,88],63:[2,88],64:[2,88],65:[2,88],66:[2,88],67:[2,88],68:[2,88],69:[2,88],70:[2,88],80:[2,88],81:[2,88],86:[2,88],87:[2,88],88:[2,88],89:[2,88],96:[2,88]},{26:[1,137],54:[1,138]},{5:[2,94],11:[2,94],23:[2,94],26:[2,94],37:[2,94],38:[2,94],53:[2,94],54:[2,94],55:[2,94],58:[2,94],59:[2,94],60:[2,94],61:[2,94],62:[2,94],63:[2,94],64:[2,94],65:[2,94],66:[2,94],67:[2,94],68:[2,94],69:[2,94],70:[2,94],80:[2,94],81:[2,94],86:[2,94],87:[2,94],88:[2,94],89:[2,94],96:[2,94]},{26:[2,95],54:[2,95],89:[2,95]},{26:[2,96],54:[2,96]},{26:[2,113],53:[2,113],54:[2,113],89:[2,113]},{26:[2,114],53:[2,114],54:[2,114],89:[2,114]},{26:[2,115],53:[2,115],54:[2,115],89:[2,115]},{38:[1,29],74:28,76:31,77:30,78:[1,33],79:[1,34],80:[1,35],81:[1,36]},{8:142,37:[1,89],40:86,43:139,45:93,52:84,56:87,61:[1,99],73:88,79:[1,92],88:[1,90],89:[1,140],90:141,91:[1,95],92:[1,98],93:[1,96],94:[1,97],95:91},{26:[2,117],53:[2,117],54:[2,117],89:[2,117]},{45:144,93:[1,96],94:[1,97],97:143},{26:[2,106],53:[2,106],54:[2,106],58:[2,106],59:[2,106],60:[2,106],61:[2,106],62:[2,106],63:[2,106],64:[2,106],65:[2,106],66:[2,106],67:[2,106],68:[2,106],69:[2,106],70:[2,106],81:[2,106],87:[2,106],89:[2,106]},{26:[2,107],53:[2,107],54:[2,107],58:[2,107],59:[2,107],60:[2,107],61:[2,107],62:[2,107],63:[2,107],64:[2,107],65:[2,107],66:[2,107],67:[2,107],68:[2,107],69:[2,107],70:[2,107],81:[2,107],87:[2,107],89:[2,107]},{26:[2,108],53:[2,108],54:[2,108],58:[2,108],59:[2,108],60:[2,108],61:[2,108],62:[2,108],63:[2,108],64:[2,108],65:[2,108],66:[2,108],67:[2,108],68:[2,108],69:[2,108],70:[2,108],81:[2,108],87:[2,108],89:[2,108]},{26:[2,111],53:[2,111],54:[2,111],58:[2,111],59:[2,111],60:[2,111],61:[2,111],62:[2,111],63:[2,111],64:[2,111],65:[2,111],66:[2,111],67:[2,111],68:[2,111],69:[2,111],70:[2,111],81:[2,111],87:[2,111],89:[2,111],98:[2,111]},{26:[2,112],53:[2,112],54:[2,112],58:[2,112],59:[2,112],60:[2,112],61:[2,112],62:[2,112],63:[2,112],64:[2,112],65:[2,112],66:[2,112],67:[2,112],68:[2,112],69:[2,112],70:[2,112],81:[2,112],87:[2,112],89:[2,112],98:[2,112]},{26:[2,109],53:[2,109],54:[2,109],58:[2,109],59:[2,109],60:[2,109],61:[2,109],62:[2,109],63:[2,109],64:[2,109],65:[2,109],66:[2,109],67:[2,109],68:[2,109],69:[2,109],70:[2,109],81:[2,109],87:[2,109],89:[2,109],96:[2,109]},{92:[1,145]},{5:[2,92],11:[2,92],23:[2,92],26:[2,92],37:[2,92],38:[2,92],53:[2,92],54:[2,92],55:[2,92],58:[2,92],59:[2,92],60:[2,92],61:[2,92],62:[2,92],63:[2,92],64:[2,92],65:[2,92],66:[2,92],67:[2,92],68:[2,92],69:[2,92],70:[2,92],80:[2,92],81:[2,92],86:[2,92],87:[2,92],88:[2,92],89:[2,92],96:[2,92]},{5:[2,99],11:[2,99],23:[2,99],25:[1,55],26:[2,99],37:[2,99],38:[2,99],53:[2,99],54:[2,99],55:[2,99],58:[2,99],59:[2,99],60:[2,99],61:[2,99],62:[2,99],63:[2,99],64:[2,99],65:[2,99],66:[2,99],67:[2,99],68:[2,99],69:[2,99],70:[2,99],80:[2,99],81:[2,99],86:[2,99],87:[2,99],88:[2,99],89:[2,99],96:[2,99]},{5:[2,100],11:[2,100],23:[2,100],26:[2,100],37:[2,100],38:[2,100],53:[2,100],54:[2,100],55:[2,100],58:[2,100],59:[2,100],60:[2,100],61:[2,100],62:[2,100],63:[2,100],64:[2,100],65:[2,100],66:[2,100],67:[2,100],68:[2,100],69:[2,100],70:[2,100],80:[2,100],81:[2,100],86:[2,100],87:[2,100],88:[2,100],89:[2,100],96:[2,100]},{87:[1,147],89:[1,146]},{89:[1,148]},{5:[2,104],11:[2,104],23:[2,104],26:[2,104],37:[2,104],38:[2,104],53:[2,104],54:[2,104],55:[2,104],58:[2,104],59:[2,104],60:[2,104],61:[2,104],62:[2,104],63:[2,104],64:[2,104],65:[2,104],66:[2,104],67:[2,104],68:[2,104],69:[2,104],70:[2,104],80:[2,104],81:[2,104],86:[2,104],87:[2,104],88:[2,104],89:[2,104],96:[2,104]},{5:[2,105],11:[2,105],23:[2,105],26:[2,105],37:[2,105],38:[2,105],53:[2,105],54:[2,105],55:[2,105],58:[2,105],59:[2,105],60:[2,105],61:[2,105],62:[2,105],63:[2,105],64:[2,105],65:[2,105],66:[2,105],67:[2,105],68:[2,105],69:[2,105],70:[2,105],80:[2,105],81:[2,105],86:[2,105],87:[2,105],88:[2,105],89:[2,105],96:[2,105]},{5:[2,82],11:[2,82],23:[2,82],26:[2,82],37:[2,82],38:[2,82],53:[2,82],54:[2,82],55:[2,82],58:[2,82],59:[2,82],60:[2,82],61:[2,82],62:[2,82],63:[2,82],64:[2,82],65:[2,82],66:[2,82],67:[2,82],68:[2,82],69:[2,82],70:[2,82],81:[2,82],87:[2,82],89:[2,82],96:[2,82]},{5:[2,20],11:[2,20],23:[2,20],37:[2,20],38:[2,20],87:[2,20]},{26:[1,149]},{5:[2,41],11:[2,41],23:[2,41],37:[2,41],38:[2,41],87:[2,41]},{26:[2,48],53:[1,150],54:[1,151]},{8:114,37:[1,89],40:86,45:93,51:152,52:113,56:87,61:[1,99],73:88,79:[1,92],88:[1,90],90:94,91:[1,95],92:[1,98],93:[1,96],94:[1,97],95:91},{26:[2,42],53:[2,42],54:[2,42]},{26:[2,43],53:[2,43],54:[2,43]},{26:[1,153]},{55:[1,154]},{26:[1,155]},{26:[2,53]},{26:[2,54]},{26:[2,55],58:[1,156],59:[1,157],60:[1,158],61:[1,159],62:[1,160],63:[1,161],64:[1,162],65:[1,163],66:[1,164],67:[1,165],68:[1,166],69:[1,167],70:[1,168]},{26:[2,69],58:[2,69],59:[2,69],60:[2,69],61:[2,69],62:[2,69],63:[2,69],64:[2,69],65:[2,69],66:[2,69],67:[2,69],68:[2,69],69:[2,69],70:[2,69]},{25:[1,126],71:169,92:[1,145]},{8:124,25:[1,126],37:[1,89],45:93,57:170,61:[1,122],71:121,72:[1,123],73:125,90:94,91:[1,95],92:[1,98],93:[1,96],94:[1,97]},{26:[2,72],58:[2,72],59:[2,72],60:[2,72],61:[2,72],62:[2,72],63:[2,72],64:[2,72],65:[2,72],66:[2,72],67:[2,72],68:[2,72],69:[2,72],70:[2,72]},{26:[2,73],58:[2,73],59:[2,73],60:[2,73],61:[2,73],62:[2,73],63:[2,73],64:[2,73],65:[2,73],66:[2,73],67:[2,73],68:[2,73],69:[2,73],70:[2,73]},{8:124,25:[1,126],37:[1,89],45:93,57:171,61:[1,122],71:121,72:[1,123],73:125,90:94,91:[1,95],92:[1,98],93:[1,96],94:[1,97]},{26:[1,172]},{38:[1,173]},{26:[1,174],54:[1,138]},{26:[1,175]},{26:[1,176]},{38:[1,177]},{38:[1,178]},{8:181,26:[1,180],37:[1,89],49:179},{5:[2,75],11:[2,75],23:[2,75],26:[2,75],37:[2,75],38:[2,75],53:[2,75],54:[2,75],55:[2,75],58:[2,75],59:[2,75],60:[2,75],61:[2,75],62:[2,75],63:[2,75],64:[2,75],65:[2,75],66:[2,75],67:[2,75],68:[2,75],69:[2,75],70:[2,75],81:[2,75],87:[2,75],89:[2,75],96:[2,75]},{5:[2,77],11:[2,77],23:[2,77],26:[2,77],37:[2,77],38:[2,77],53:[2,77],54:[2,77],55:[2,77],58:[2,77],59:[2,77],60:[2,77],61:[2,77],62:[2,77],63:[2,77],64:[2,77],65:[2,77],66:[2,77],67:[2,77],68:[2,77],69:[2,77],70:[2,77],81:[2,77],87:[2,77],89:[2,77],96:[2,77]},{5:[2,93],11:[2,93],23:[2,93],26:[2,93],37:[2,93],38:[2,93],53:[2,93],54:[2,93],55:[2,93],58:[2,93],59:[2,93],60:[2,93],61:[2,93],62:[2,93],63:[2,93],64:[2,93],65:[2,93],66:[2,93],67:[2,93],68:[2,93],69:[2,93],70:[2,93],80:[2,93],81:[2,93],86:[2,93],87:[2,93],88:[2,93],89:[2,93],96:[2,93]},{8:183,37:[1,89],40:86,45:93,52:182,56:87,61:[1,99],73:88,79:[1,92],88:[1,90],90:94,91:[1,95],92:[1,98],93:[1,96],94:[1,97],95:91},{54:[1,138],89:[1,184]},{26:[2,118],53:[2,118],54:[2,118],89:[2,118]},{54:[2,107],89:[2,107],96:[1,185]},{54:[2,96],89:[2,96],96:[1,186]},{54:[1,188],81:[1,187]},{98:[1,189]},{26:[2,110],53:[2,110],54:[2,110],58:[2,110],59:[2,110],60:[2,110],61:[2,110],62:[2,110],63:[2,110],64:[2,110],65:[2,110],66:[2,110],67:[2,110],68:[2,110],69:[2,110],70:[2,110],81:[2,110],87:[2,110],89:[2,110],96:[2,110]},{5:[2,101],11:[2,101],23:[2,101],26:[2,101],37:[2,101],38:[2,101],53:[2,101],54:[2,101],55:[2,101],58:[2,101],59:[2,101],60:[2,101],61:[2,101],62:[2,101],63:[2,101],64:[2,101],65:[2,101],66:[2,101],67:[2,101],68:[2,101],69:[2,101],70:[2,101],80:[2,101],81:[2,101],86:[2,101],87:[2,101],88:[2,101],89:[2,101],96:[2,101]},{5:[2,103],11:[2,103],23:[2,103],26:[2,103],37:[2,103],38:[2,103],53:[2,103],54:[2,103],55:[2,103],58:[2,103],59:[2,103],60:[2,103],61:[2,103],62:[2,103],63:[2,103],64:[2,103],65:[2,103],66:[2,103],67:[2,103],68:[2,103],69:[2,103],70:[2,103],80:[2,103],81:[2,103],86:[2,103],87:[2,103],88:[2,103],89:[2,103],96:[2,103]},{5:[2,102],11:[2,102],23:[2,102],26:[2,102],37:[2,102],38:[2,102],53:[2,102],54:[2,102],55:[2,102],58:[2,102],59:[2,102],60:[2,102],61:[2,102],62:[2,102],63:[2,102],64:[2,102],65:[2,102],66:[2,102],67:[2,102],68:[2,102],69:[2,102],70:[2,102],80:[2,102],81:[2,102],86:[2,102],87:[2,102],88:[2,102],89:[2,102],96:[2,102]},{5:[2,40],11:[2,40],23:[2,40],37:[2,40],38:[2,40],87:[2,40]},{8:191,26:[2,51],37:[1,89],40:86,45:93,52:190,56:87,61:[1,99],73:88,79:[1,92],88:[1,90],90:94,91:[1,95],92:[1,98],93:[1,96],94:[1,97],95:91},{8:193,37:[1,89],40:86,45:93,52:192,56:87,61:[1,99],73:88,79:[1,92],88:[1,90],90:94,91:[1,95],92:[1,98],93:[1,96],94:[1,97],95:91},{26:[2,49],53:[1,194],54:[1,151]},{5:[2,23],11:[2,23],23:[2,23],37:[2,23],38:[2,23],87:[2,23]},{8:124,25:[1,126],32:195,37:[1,89],40:118,45:93,56:119,57:120,61:[1,122],71:121,72:[1,123],73:125,79:[1,92],88:[1,90],90:94,91:[1,95],92:[1,98],93:[1,96],94:[1,97],95:91},{5:[2,24],11:[2,24],23:[2,24],37:[2,24],38:[2,24],87:[2,24]},{8:124,25:[1,126],37:[1,89],45:93,57:196,61:[1,122],71:121,72:[1,123],73:125,90:94,91:[1,95],92:[1,98],93:[1,96],94:[1,97]},{8:124,25:[1,126],37:[1,89],45:93,57:197,61:[1,122],71:121,72:[1,123],73:125,90:94,91:[1,95],92:[1,98],93:[1,96],94:[1,97]},{8:124,25:[1,126],37:[1,89],45:93,57:198,61:[1,122],71:121,72:[1,123],73:125,90:94,91:[1,95],92:[1,98],93:[1,96],94:[1,97]},{8:124,25:[1,126],37:[1,89],45:93,57:199,61:[1,122],71:121,72:[1,123],73:125,90:94,91:[1,95],92:[1,98],93:[1,96],94:[1,97]},{8:124,25:[1,126],37:[1,89],45:93,57:200,61:[1,122],71:121,72:[1,123],73:125,90:94,91:[1,95],92:[1,98],93:[1,96],94:[1,97]},{8:124,25:[1,126],37:[1,89],45:93,57:201,61:[1,122],71:121,72:[1,123],73:125,90:94,91:[1,95],92:[1,98],93:[1,96],94:[1,97]},{8:124,25:[1,126],37:[1,89],45:93,57:202,61:[1,122],71:121,72:[1,123],73:125,90:94,91:[1,95],92:[1,98],93:[1,96],94:[1,97]},{8:124,25:[1,126],37:[1,89],45:93,57:203,61:[1,122],71:121,72:[1,123],73:125,90:94,91:[1,95],92:[1,98],93:[1,96],94:[1,97]},{8:124,25:[1,126],37:[1,89],45:93,57:204,61:[1,122],71:121,72:[1,123],73:125,90:94,91:[1,95],92:[1,98],93:[1,96],94:[1,97]},{8:124,25:[1,126],37:[1,89],45:93,57:205,61:[1,122],71:121,72:[1,123],73:125,90:94,91:[1,95],92:[1,98],93:[1,96],94:[1,97]},{8:124,25:[1,126],37:[1,89],45:93,57:206,61:[1,122],71:121,72:[1,123],73:125,90:94,91:[1,95],92:[1,98],93:[1,96],94:[1,97]},{8:124,25:[1,126],37:[1,89],45:93,57:207,61:[1,122],71:121,72:[1,123],73:125,90:94,91:[1,95],92:[1,98],93:[1,96],94:[1,97]},{8:124,25:[1,126],37:[1,89],45:93,57:208,61:[1,122],71:121,72:[1,123],73:125,90:94,91:[1,95],92:[1,98],93:[1,96],94:[1,97]},{26:[2,70],58:[2,70],59:[2,70],60:[2,70],61:[2,70],62:[2,70],63:[2,70],64:[2,70],65:[2,70],66:[2,70],67:[2,70],68:[2,70],69:[2,70],70:[2,70]},{26:[2,71],58:[2,71],59:[2,71],60:[2,71],61:[2,71],62:[2,71],63:[2,71],64:[2,71],65:[2,71],66:[2,71],67:[2,71],68:[2,71],69:[2,71],70:[2,71]},{26:[1,209],58:[1,156],59:[1,157],60:[1,158],61:[1,159],62:[1,160],63:[1,161],64:[1,162],65:[1,163],66:[1,164],67:[1,165],68:[1,166],69:[1,167],70:[1,168]},{5:[2,25],11:[2,25],23:[2,25],37:[2,25],38:[2,25],87:[2,25]},{39:[1,210]},{5:[2,31],11:[2,31],23:[2,31],37:[2,31],38:[2,31],87:[2,31]},{5:[2,32],11:[2,32],23:[2,32],37:[2,32],38:[2,32],87:[2,32]},{5:[2,33],11:[2,33],23:[2,33],37:[2,33],38:[2,33],87:[2,33]},{26:[1,211]},{26:[1,212]},{8:214,26:[1,213],37:[1,89]},{5:[2,37],11:[2,37],23:[2,37],37:[2,37],38:[2,37],87:[2,37]},{26:[2,38],37:[2,38]},{26:[2,97],54:[2,97],89:[2,97]},{26:[2,98],54:[2,98],89:[2,98]},{26:[2,116],53:[2,116],54:[2,116],89:[2,116]},{8:216,37:[1,89],61:[1,99],90:215,92:[1,98]},{8:218,37:[1,89],61:[1,99],90:217,92:[1,98]},{26:[2,123],53:[2,123],54:[2,123],89:[2,123]},{45:219,93:[1,96],94:[1,97]},{8:221,37:[1,89],45:93,61:[1,99],73:220,90:94,91:[1,95],92:[1,98],93:[1,96],94:[1,97]},{26:[2,44],53:[2,44],54:[2,44]},{26:[2,47],53:[2,47],54:[2,47]},{26:[2,45],53:[2,45],54:[2,45]},{26:[2,46],53:[2,46],54:[2,46]},{8:191,26:[2,50],37:[1,89],40:86,45:93,52:190,56:87,61:[1,99],73:88,79:[1,92],88:[1,90],90:94,91:[1,95],92:[1,98],93:[1,96],94:[1,97],95:91},{26:[2,52]},{26:[2,56],58:[2,56],59:[2,56],60:[1,158],61:[1,159],62:[1,160],63:[1,161],64:[1,162],65:[1,163],66:[1,164],67:[1,165],68:[1,166],69:[1,167],70:[1,168]},{26:[2,57],58:[2,57],59:[2,57],60:[1,158],61:[1,159],62:[1,160],63:[1,161],64:[1,162],65:[1,163],66:[1,164],67:[1,165],68:[1,166],69:[1,167],70:[1,168]},{26:[2,58],58:[2,58],59:[2,58],60:[2,58],61:[2,58],62:[1,160],63:[1,161],64:[1,162],65:[2,58],66:[2,58],67:[2,58],68:[2,58],69:[2,58],70:[2,58]},{26:[2,59],58:[2,59],59:[2,59],60:[2,59],61:[2,59],62:[1,160],63:[1,161],64:[1,162],65:[2,59],66:[2,59],67:[2,59],68:[2,59],69:[2,59],70:[2,59]},{26:[2,60],58:[2,60],59:[2,60],60:[2,60],61:[2,60],62:[2,60],63:[2,60],64:[2,60],65:[2,60],66:[2,60],67:[2,60],68:[2,60],69:[2,60],70:[2,60]},{26:[2,61],58:[2,61],59:[2,61],60:[2,61],61:[2,61],62:[2,61],63:[2,61],64:[2,61],65:[2,61],66:[2,61],67:[2,61],68:[2,61],69:[2,61],70:[2,61]},{26:[2,62],58:[2,62],59:[2,62],60:[2,62],61:[2,62],62:[2,62],63:[2,62],64:[2,62],65:[2,62],66:[2,62],67:[2,62],68:[2,62],69:[2,62],70:[2,62]},{26:[2,63],58:[2,63],59:[2,63],60:[1,158],61:[1,159],62:[1,160],63:[1,161],64:[1,162],65:[2,63],66:[2,63],67:[2,63],68:[2,63],69:[2,63],70:[2,63]},{26:[2,64],58:[2,64],59:[2,64],60:[1,158],61:[1,159],62:[1,160],63:[1,161],64:[1,162],65:[2,64],66:[2,64],67:[2,64],68:[2,64],69:[2,64],70:[2,64]},{26:[2,65],58:[2,65],59:[2,65],60:[1,158],61:[1,159],62:[1,160],63:[1,161],64:[1,162],65:[2,65],66:[2,65],67:[2,65],68:[2,65],69:[2,65],70:[2,65]},{26:[2,66],58:[2,66],59:[2,66],60:[1,158],61:[1,159],62:[1,160],63:[1,161],64:[1,162],65:[2,66],66:[2,66],67:[2,66],68:[2,66],69:[2,66],70:[2,66]},{26:[2,67],58:[2,67],59:[2,67],60:[1,158],61:[1,159],62:[1,160],63:[1,161],64:[1,162],65:[2,67],66:[2,67],67:[2,67],68:[2,67],69:[2,67],70:[2,67]},{26:[2,68],58:[2,68],59:[2,68],60:[1,158],61:[1,159],62:[1,160],63:[1,161],64:[1,162],65:[2,68],66:[2,68],67:[2,68],68:[2,68],69:[2,68],70:[2,68]},{26:[2,74],58:[2,74],59:[2,74],60:[2,74],61:[2,74],62:[2,74],63:[2,74],64:[2,74],65:[2,74],66:[2,74],67:[2,74],68:[2,74],69:[2,74],70:[2,74]},{8:222,37:[1,89],40:223,88:[1,90],95:91},{5:[2,34],11:[2,34],23:[2,34],37:[2,34],38:[2,34],87:[2,34]},{5:[2,35],11:[2,35],23:[2,35],37:[2,35],38:[2,35],87:[2,35]},{5:[2,36],11:[2,36],23:[2,36],37:[2,36],38:[2,36],87:[2,36]},{26:[2,39],37:[2,39]},{89:[1,224]},{89:[1,225]},{89:[1,226]},{89:[1,227]},{98:[1,228]},{54:[2,124],81:[2,124]},{54:[2,125],81:[2,125]},{26:[1,229]},{26:[1,230]},{26:[2,119],53:[2,119],54:[2,119],89:[2,119]},{26:[2,121],53:[2,121],54:[2,121],89:[2,121]},{26:[2,120],53:[2,120],54:[2,120],89:[2,120]},{26:[2,122],53:[2,122],54:[2,122],89:[2,122]},{8:231,37:[1,89],45:93,61:[1,99],73:232,90:94,91:[1,95],92:[1,98],93:[1,96],94:[1,97]},{5:[2,28],11:[2,28],23:[2,28],37:[2,28],38:[2,28],87:[2,28]},{5:[2,29],11:[2,29],23:[2,29],37:[2,29],38:[2,29],87:[2,29]},{54:[2,126],81:[2,126]},{54:[2,127],81:[2,127]}],
defaultActions: {26:[2,1],33:[2,83],34:[2,84],118:[2,53],119:[2,54],195:[2,52]},
parseError: function parseError(str, hash) {
    throw new Error(str);
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == "undefined")
        this.lexer.yylloc = {};
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === "function")
        this.parseError = this.yy.parseError;
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || 1;
        if (typeof token !== "number") {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == "undefined") {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        if (typeof action === "undefined" || !action.length || !action[0]) {
            var errStr = "";
            if (!recovering) {
                expected = [];
                for (p in table[state])
                    if (this.terminals_[p] && p > 2) {
                        expected.push("'" + this.terminals_[p] + "'");
                    }
                if (this.lexer.showPosition) {
                    errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                } else {
                    errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1?"end of input":"'" + (this.terminals_[symbol] || symbol) + "'");
                }
                this.parseError(errStr, {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});
            }
        }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0)
                    recovering--;
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column};
            if (ranges) {
                yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== "undefined") {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}
};
/* Jison generated lexer */
var lexer = (function(){
var lexer = ({EOF:1,
parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },
setInput:function (input) {
        this._input = input;
        this._more = this._less = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {first_line:1,first_column:0,last_line:1,last_column:0};
        if (this.options.ranges) this.yylloc.range = [0,0];
        this.offset = 0;
        return this;
    },
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) this.yylloc.range[1]++;

        this._input = this._input.slice(1);
        return ch;
    },
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length-len-1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length-1);
        this.matched = this.matched.substr(0, this.matched.length-1);

        if (lines.length-1) this.yylineno -= lines.length-1;
        var r = this.yylloc.range;

        this.yylloc = {first_line: this.yylloc.first_line,
          last_line: this.yylineno+1,
          first_column: this.yylloc.first_column,
          last_column: lines ?
              (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length:
              this.yylloc.first_column - len
          };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        return this;
    },
more:function () {
        this._more = true;
        return this;
    },
less:function (n) {
        this.unput(this.match.slice(n));
    },
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20)+(next.length > 20 ? '...':'')).replace(/\n/g, "");
    },
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c+"^";
    },
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) this.done = true;

        var token,
            match,
            tempMatch,
            index,
            col,
            lines;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i=0;i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (!this.options.flex) break;
            }
        }
        if (match) {
            lines = match[0].match(/(?:\r\n?|\n).*/g);
            if (lines) this.yylineno += lines.length;
            this.yylloc = {first_line: this.yylloc.last_line,
                           last_line: this.yylineno+1,
                           first_column: this.yylloc.last_column,
                           last_column: lines ? lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length};
            this.yytext += match[0];
            this.match += match[0];
            this.matches = match;
            this.yyleng = this.yytext.length;
            if (this.options.ranges) {
                this.yylloc.range = [this.offset, this.offset += this.yyleng];
            }
            this._more = false;
            this._input = this._input.slice(match[0].length);
            this.matched += match[0];
            token = this.performAction.call(this, this.yy, this, rules[index],this.conditionStack[this.conditionStack.length-1]);
            if (this.done && this._input) this.done = false;
            if (token) return token;
            else return;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line '+(this.yylineno+1)+'. Unrecognized text.\n'+this.showPosition(),
                    {text: "", token: null, line: this.yylineno});
        }
    },
lex:function lex() {
        var r = this.next();
        if (typeof r !== 'undefined') {
            return r;
        } else {
            return this.lex();
        }
    },
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },
popState:function popState() {
        return this.conditionStack.pop();
    },
_currentRules:function _currentRules() {
        return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules;
    },
topState:function () {
        return this.conditionStack[this.conditionStack.length-2];
    },
pushState:function begin(condition) {
        this.begin(condition);
    }});
lexer.options = {};
lexer.performAction = function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START
switch($avoiding_name_collisions) {
case 0:
                                    var _reg = /\\+$/;
                                    var _esc = yy_.yytext.match(_reg);
                                    var _num = _esc ? _esc[0].length: null;
                                    /*转义实现，非常恶心，暂时没有好的解决方案*/
                                    if (!_num || !(_num % 2)) {
                                      this.begin("mu");
                                    } else {
                                      yy_.yytext = yy_.yytext.replace(/\\$/, '');
                                      this.begin('esc');
                                    }
                                    if (_num > 1) yy_.yytext = yy_.yytext.replace(/(\\\\)+$/, '\\');
                                    if(yy_.yytext) return 87; 
                                  
break;
case 1: 
                                    var _reg = /\\+$/;
                                    var _esc = yy_.yytext.match(_reg);
                                    var _num = _esc ? _esc[0].length: null;
                                    if (!_num || !(_num % 2)) {
                                      this.begin("h");
                                    } else {
                                      yy_.yytext = yy_.yytext.replace(/\\$/, '');
                                      this.begin('esc');
                                    }
                                    if (_num > 1) yy_.yytext = yy_.yytext.replace(/(\\\\)+$/, '\\');
                                    if(yy_.yytext) return 87; 
                                  
break;
case 2: return 87; 
break;
case 3: this.popState(); return 11; 
break;
case 4: this.popState(); yy_.yytext = yy_.yytext.replace(/^#\[\[|\]\]#$/g, ''); return 87
break;
case 5: this.popState(); return 11; 
break;
case 6: return 23; 
break;
case 7: return 29; 
break;
case 8: return 31; 
break;
case 9: return 33; 
break;
case 10: this.popState(); return 34; 
break;
case 11: this.popState(); return 34; 
break;
case 12: this.popState(); return 35; 
break;
case 13: this.popState(); return 41; 
break;
case 14: return 36; 
break;
case 15: return 42; 
break;
case 16: return 44; 
break;
case 17: return 24; 
break;
case 18: return 'EVAL'; 
break;
case 19: return 47; 
break;
case 20: return 48; 
break;
case 21: return 39; 
break;
case 22: return yy_.yytext; 
break;
case 23: return yy_.yytext; 
break;
case 24: return yy_.yytext; 
break;
case 25: return yy_.yytext; 
break;
case 26: return yy_.yytext; 
break;
case 27: return yy_.yytext; 
break;
case 28: return yy_.yytext; 
break;
case 29: return yy_.yytext; 
break;
case 30: return 37; 
break;
case 31: return 37; 
break;
case 32: return yy_.yytext; 
break;
case 33: return 55; 
break;
case 34: 
                                    var conditionStack = this.conditionStack;
                                    var len = conditionStack.length;
                                    if (len >= 2 && conditionStack[len - 1] === 'c' && conditionStack[len - 2] === 'run') {
                                      return 53;
                                    }
                                  
break;
case 35: /*ignore whitespace*/ 
break;
case 36: return 79; 
break;
case 37: return 81; 
break;
case 38: return 98; 
break;
case 39: return 78; 
break;
case 40: this.popState(); return 80; 
break;
case 41: this.begin("c"); return 25; 
break;
case 42: 
                                    if (this.popState() === "c") {
                                      var conditionStack = this.conditionStack;
                                      var len = conditionStack.length;

                                      if (conditionStack[len - 1] === 'run') {
                                        this.popState();
                                        len = len - 1;
                                      }

                                      /** 遇到#set(a = b)括号结束后结束状态h*/
                                      if (len === 2 && conditionStack[1] === "h"){
                                        this.popState();
                                      } else if (len === 3 && conditionStack[1] === "mu" && conditionStack[2] === "h") {
                                        // issue#7 $foo#if($a)...#end
                                        this.popState();
                                        this.popState();
                                      }

                                      return 26; 
                                    } else {
                                      return 'CONTENT'; 
                                    }
                                  
break;
case 43: this.begin("i"); return 88; 
break;
case 44: 
                                    if (this.popState() === "i") {
                                      return 89; 
                                    } else {
                                      return 'CONTENT';
                                    }
                                  
break;
case 45: return 96; 
break;
case 46: return 86; 
break;
case 47: return 54; 
break;
case 48: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2).replace(/\\"/g,'"'); return 94; 
break;
case 49: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2).replace(/\\'/g,"'"); return 93; 
break;
case 50: return 91; 
break;
case 51: return 91; 
break;
case 52: return 91; 
break;
case 53: return 92; 
break;
case 54: return 38; 
break;
case 55: this.begin("run"); return 38; 
break;
case 56: this.begin('h'); return 23; 
break;
case 57: this.popState(); return 87; 
break;
case 58: this.popState(); return 87; 
break;
case 59: this.popState(); return 87; 
break;
case 60: this.popState(); return 5; 
break;
case 61: return 5; 
break;
}
};
lexer.rules = [/^(?:[^#]*?(?=\$))/,/^(?:[^\$]*?(?=#))/,/^(?:[^\x00]+)/,/^(?:#\*[\s\S]+?\*#)/,/^(?:#\[\[[\s\S]+?\]\]#)/,/^(?:##[^\n]+)/,/^(?:#(?=[a-zA-Z{]))/,/^(?:set[ ]*)/,/^(?:if[ ]*)/,/^(?:elseif[ ]*)/,/^(?:else\b)/,/^(?:\{else\})/,/^(?:end\b)/,/^(?:break\b)/,/^(?:foreach[ ]*)/,/^(?:include[ ]*)/,/^(?:parse[ ]*)/,/^(?:noescape\b)/,/^(?:evaluate\b)/,/^(?:define[ ]*)/,/^(?:macro[ ]*)/,/^(?:in\b)/,/^(?:[%\+\-\*/])/,/^(?:<=)/,/^(?:>=)/,/^(?:[><])/,/^(?:==)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!=)/,/^(?:\$!(?=[{a-zA-Z_]))/,/^(?:\$(?=[{a-zA-Z_]))/,/^(?:!)/,/^(?:=)/,/^(?:[ ]+(?=[^,]))/,/^(?:\s+)/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\.\.)/,/^(?:\.)/,/^(?:,[ ]*)/,/^(?:"(\\"|[^\"])*")/,/^(?:'(\\'|[^\'])*')/,/^(?:null\b)/,/^(?:false\b)/,/^(?:true\b)/,/^(?:[0-9]+)/,/^(?:[_a-zA-Z][a-zA-Z0-9_\-]*)/,/^(?:[_a-zA-Z][a-zA-Z0-9_\-]*[ ]*(?=\())/,/^(?:#)/,/^(?:.)/,/^(?:\s+)/,/^(?:[\$#])/,/^(?:$)/,/^(?:$)/];
lexer.conditions = {"mu":{"rules":[5,30,31,39,40,41,42,43,44,46,54,56,57,58,60],"inclusive":false},"c":{"rules":[21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,41,42,43,44,46,47,48,49,50,51,52,53,54],"inclusive":false},"i":{"rules":[21,22,23,24,25,26,27,28,29,30,31,32,33,35,36,37,41,42,43,44,45,46,47,48,49,50,51,52,53,54],"inclusive":false},"h":{"rules":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,30,31,32,33,38,41,42,43,44,46,53,55,57,58,60],"inclusive":false},"esc":{"rules":[59],"inclusive":false},"run":{"rules":[30,31,32,34,35,36,37,38,41,42,43,44,46,47,48,49,50,51,52,53,54,57,58,60],"inclusive":false},"INITIAL":{"rules":[0,1,2,61],"inclusive":true}};
return lexer;})()
parser.lexer = lexer;
function Parser () { this.yy = {}; }Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = velocity;
exports.Parser = velocity.Parser;
exports.parse = function () { return velocity.parse.apply(velocity, arguments); }
exports.main = function commonjsMain(args) {
    if (!args[1])
        throw new Error('Usage: '+args[0]+' FILE');
    var source, cwd;
    if (typeof process !== 'undefined') {
        source = require('fs').readFileSync(require('path').resolve(args[1]), "utf8");
    } else {
        source = require("file").path(require("file").cwd()).join(args[1]).read({charset: "utf-8"});
    }
    return exports.parser.parse(source);
}
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(typeof process !== 'undefined' ? process.argv.slice(1) : require("system").args);
}
}